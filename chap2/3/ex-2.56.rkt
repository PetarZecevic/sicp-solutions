#lang racket

;Algebarske izraze predstavljamo na sledeci nacin: ax + b -> (+ (* a x) b)
(define (variable? e) (symbol? e))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))))
(define (make-exponentiation base exponent) ;n
  (cond ((=number? exponent 0) 1)
        ((or (=number? base 1) (=number? exponent 1)) base)
        (else (list '** base exponent))))
(define (sum? e)
  (and (pair? e) (eq? (car e) '+)))
(define (product? e)
  (and (pair? e) (eq? (car e) '*)))
(define (exponentiation? e) ;n
  (and (pair? e) (eq? (car e) '**)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))
(define (base e) (cadr e)) ;n
(define (exponent e) (caddr e)) ;n
;Izvod izraza exp po promenljivoj var.
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum (make-product (multiplier exp)
                                 (deriv (multiplicand exp) var))
                   (make-product (multiplicand exp)
                                 (deriv (multiplier exp) var))))
        ((exponentiation? exp)
         (make-product (make-product (exponent exp)
                                     (make-exponentiation (base exp) (- (exponent exp) 1)))
                       (deriv (base exp) var)))
        (else
         (error "unknown expression type -- DERIV" exp))))

(deriv '(+ (** x 5) (** x 2)) 'x)
(deriv '(** x 2) 'x)
(deriv '(** x 1) 'x)
(deriv '(** x 0) 'x)